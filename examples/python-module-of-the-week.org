*** functools
#+BEGIN_SRC python
  # functools_partial.py
  import functools


  def myfunc(a, b=2):
      """Docstring for myfunc()"""
      print(f' Called myfunc with {a}, {b}')


  def show_details(name, f, is_partial=False):
      "Show detials of a  callable object"
      print(f'{name}:')
      print(f' object: {f}')

      if not is_partial:
	  print(f' __name__: {f.__name__}')
      if is_partial:
	  print(f' func: {f.func}')
	  print(f' args: {f.args}')
	  print(f' keywords: {f.keywords}')
      return


  show_details('myfunc', myfunc)
  myfunc('a', 10)
  print()


  # set a different default value for 'b', but require
  # the caller tot provide 'a'.
  p1 = functools.partial(myfunc, b=4)
  show_details('partial with named default', p1, True)
  p1('passing a')
  p1('override b', b=5)
  print()


  # set default values for both 'a' and 'b'
  p2 = functools.partial(myfunc, 'default a', b=99)
  show_details('partial with defaults', p2, True)
  p2()
  p2(b='override b')
  print()

  print('Insufficient arguments')
  p1()

  ### Outputs
  """
  myfunc:
   object: <function myfunc at 0x7fdf486f5e18>
   __name__: myfunc
   Called myfunc with ('a', 10)

  partial with named default:
   object: functools.partial(<function myfunc at 0x7fdf486f5e18>, b=4)
   func: <function myfunc at 0x7fdf486f5e18>
   args: ()
   keywords: {'b': 4}
   Called myfunc with ('passing a', 4)
   Called myfunc with ('override b', 5)

  partial with defaults:
   object: functools.partial(<function myfunc at 0x7fdf486f5e18>, 'default a', b=99)
   func: <function myfunc at 0x7fdf486f5e18>
   args: ('default a',)
   keywords: {'b': 99}
   Called myfunc with ('default a', 99)
   Called myfunc with ('default a', 'override b')

  Insufficient arguments
  Traceback (most recent call last):
    File "main.py", line 44, in <module>
      p1()
  TypeError: myfunc() missing 1 required positional argument: 'a'
  """
#+END_SRC
