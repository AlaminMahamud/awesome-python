#+TITLE: My Awesome Python Handbook
#+AUTHOR: Muhammad Alamin Khan
#+EMAIL: alamin.ineedahelp@gmail.com
#+STARTUP: overview indent inlineimages hideblocks
#+DESCRIPTION: Quick Reference for this ever-forgetting mind.

Notes that I tend to forget all the time and search on the internet

* CHEATSHEET
** rules
#+BEGIN_SRC python
"""
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
"""
#+END_SRC

** variable types
| Variable Type | Description                            | Casting | Examples                |
|---------------+----------------------------------------+---------+-------------------------|
| int           | whole number                           | int()   | 5, -11, 0               |
| float         | float number                           | float() | 9.57, -0.256, 1.0       |
| string        | ordered, immutable character container | str()   | "this is a string"      |
| list          | ordered, mutable container             | list()  | [1, 2.0, "hi"]          |
| dictionary    | unordered, mutable, associative array  | dict()  | {"k1": "v1", "k2":"v2"  |
| tuple         | ordered, immutable                     | tuple() | (4, 9), ("word1", "w2") |
| set           | immutable, ordered                     | set()   | {1, 2, 3, "hello"}      |
|---------------+----------------------------------------+---------+-------------------------|
** operators
#+BEGIN_SRC python
5 +  5   # + => addition
6 -  2   # - => subtraction
1 *  2   # * => multiplication
5 /  2   # / => division with floating point ## output:: 2.5
5 // 2   # // => division without integer flooring the float value ## output :: 2
2 ** 3   # exponent
5 %  2   # modulus
5 >  2   # greater than op
5 <  2   # less than op
5 >= 2   # greater than equal
5 <= 2   # lesser than equal
5 == 5   # returns true if equal else false
5 is 5   # returns true if equal else false
10 != 5  # returns true if not equal
10 is not 5 # returns true if not equal
1 in [3, 4, 5, 6] # returns true if 1 is in the collection
#+END_SRC

** lists
#+BEGIN_SRC python
  # create a list
  bikes = ['trek', 
	   'redline',
	   'giant']

  # list index structure
  """
   +---+---+---+---+---+---+
   | P | y | t | h | o | n |
   +---+---+---+---+---+---+
     0   1   2   3   4   5   
    -6  -5  -4  -3  -2  -1
  """
  # first item
  bikes[0]
  # last item
  bikes[-1]

  # looping through a list
  for bike in bikes:
      print(bike)


  bikes = []
  # Adding items to a list at the end
  bikes.append('trek')
  # Adding items to a specific index
  bikes.insert(<index_position>, <index_value>)
  # Get item from a specific index
  bikes.index(<index_position>)
  # Remove all occurances of a particular value
  bikes.remove(<value_to_be_removed>)

  # Making numerical Lists
  squares = []
  for x in range(1, 11):
      squares.append(x**2)

  # List Comprehensions
  squares = [x**2 for x in range(1,11)]

  # Slicing a list
  a = ['sam', 'bob', 'ada', 'bea']
  """
  a[start:end:step] # start through not past end, by step
  a[start:end]      # items start through end-1
  a[start:]         # items start through the rest of the array
  a[:end]           # items from the beginning through end-1
  a[:]              # copy of whole array
  """
  a[-1]    # last item in the array
  a[-2:]   # last two items in the array
  a[:-2]   # everything except the last two items

  a[::-1]    # all items in the array, reversed
  a[1::-1]   # the first two items, reversed
  a[:-3:-1]  # the last two items, reversed
  a[-3::-1]  # everything except the last two items, reversed
#+END_SRC

** tuples
#+BEGIN_SRC python
## Creating a tuple
dimensions = (1920, 1080)
#+END_SRC

** sys
#+BEGIN_SRC python
"""
--- Dynamic Objects ---
argv -- command line args
path -- module search path
path[0] -- script directory else ''
modules -- dictionary of loaded modules

stdin -- standard input file obj; used by input()
stdout -- standard output file obj; used by print()
stderr -- standard error obj; used for error messages

last_type -- type of last uncaught exception
last_value -- value of last uncaught exception
last_traceback -- traceback of last uncaught exception

--- Static Objects ---
builtin_module_names -- tuple of module names built into this interpreter
exec_prefix -- prefix used to find the machine-specific Python library
executable -- absolute path of the executable binary of the Python interpreter.

--- functions ---
exit() -- exit the interpreter by raising SystemExit
"""
#+END_SRC


command line args for the following command:
#+BEGIN_SRC shell
python foo.py bar -c qux --h
#+END_SRC

#+BEGIN_SRC python
"""
sys.argv[0] => script_name => foo.py
sys.argv[1] => first_arg   => bar
sys.argv[2] => second_arg  => -c
sys.argv[3] => third_arg   => qux
sys.argv[4] => fourth_arg  => --h
"""
#+END_SRC

** os
#+BEGIN_SRC python
  """
  os.name    -> `posix` or `nt`
  os.curdir  -> .
  os.pardir  -> ..
  os.sep     -> '/' or '\'
  os.linesep -> '\r' or '\n' or '\r\n'
  os.devnull -> '/dev/null', etc
  """
#+END_SRC
** class special methods <lots of example needed>
#+BEGIN_SRC python
"""
__new__(cls)
__init__(self, args)
__del__(self)
__repr__(self)
__str__(self)
__cmp__(self, other)
__index__(self)
__hash__(self)
__getattr__(self, name)
__getattribute__(self, name)
__setattr__(self, name, attr)
__delattr__(self, name)
__call__(self, name, kwargs)
__lt__(self, other)
__le__(self, other)
__gt__(self, other)
__ge__(self, other)
__eq__(self, other)
__ne__(self, other)
__nonzero__(self)
"""
#+END_SRC

** modules and packages
*** Modules
<file-name>.py contains definitions, functions, classes and statements
#+BEGIN_SRC python

  ##########################
  # Example: area.py
  ##########################
  import math

  def circle_area(radius):
      return math.pi * (radius**2)

  def square_area(x):
      return x*x

  def rectangle_area(x, y):
      return x*y
  ##########################

  ##########################
  # Example: using area.py
  ##########################
  import area
  print(area.circle_area(50)
  print(area.square_area(10)
  print(area.rectangle_area(10, 20)

  # you can use selective definitions
  from area import circle_area
  print(circle_area(50))

  # you can import everything by *
  from area import *
  print(circle_area(50))
  print(square_area(10))
  pritn(rectangle_area(10, 20))
  ##########################

#+END_SRC

`__name__` is set to `__main__` when the module is run as standalone program.
run script as stand-alone program
#+BEGIN_SRC python
  if __name__ == '__main__':
      print('Do Something')
#+END_SRC
*** packages 
dir of python modules
#+BEGIN_SRC python

####################
# package structure
####################
"""
geometry (package)
>>> __init__.py
>>> area.py (module)
>>> volume.py (module)
"""

####################
# package structure
####################
from geometry import area, volume
print(area.circle_area(5))
print(volume.cube_volume(12))

#+END_SRC

The Module to be recognized as package should have __path__ attribute

*Some Examples*:
[[./images/modules_and_packages/001.png]]
[[./images/modules_and_packages/002.jpg]]
[[./images/modules_and_packages/003.png]]
[[./images/modules_and_packages/004.png]]
[[./images/modules_and_packages/005.png]]
[[./images/modules_and_packages/006.png]]
[[./images/modules_and_packages/007.png]]
*** Locating Modules
at the time of import; python interpreter searches for the module in the following 
1. pwd
2. each dir in the `PYTHONPATH`
3. default path - on unix `/usr/local/lib/python`
* Contributing
Please read [[./CONTRIBUTING.md][CONTRIBUTING.md]] for details on our code of conduct, and the process for submitting pull requests to us.

* Versioning
We use [[http://semver.org/][SemVer]] for versioning. For the versions available, see the tags on this repository.

* Authors
Billie Thompson - Initial work - PurpleBooth
See also the list of contributors who participated in this project.

* License
This project is licensed under the MIT License - see the [[./LICENSE][LICENSE]] file for details

* Acknowledgments
Hat tip to anyone whose code was used
Inspiration
etc
