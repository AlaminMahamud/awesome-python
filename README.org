#+TITLE: My Awesome Python Handbook
#+DESCRIPTION: Quick Reference for this ever-forgetting mind.

Notes that I tend to forget all the time and search on the internet

* CheatSheet

** Rules
#+BEGIN_SRC python
"""
Beautiful is better than ugly.
Explicit is better than implicit.
Simple is better than complex.
Complex is better than complicated.
Flat is better than nested.
Sparse is better than dense.
Readability counts.
Special cases aren't special enough to break the rules.
Although practicality beats purity.
Errors should never pass silently.
Unless explicitly silenced.
In the face of ambiguity, refuse the temptation to guess.
There should be one-- and preferably only one --obvious way to do it.
Although that way may not be obvious at first unless you're Dutch.
Now is better than never.
Although never is often better than *right* now.
If the implementation is hard to explain, it's a bad idea.
If the implementation is easy to explain, it may be a good idea.
Namespaces are one honking great idea -- let's do more of those!
"""
#+END_SRC

** Lists
#+BEGIN_SRC python
  # create a list
  bikes = ['trek', 
	   'redline',
	   'giant']

  # list index structure
  """
   +---+---+---+---+---+---+
   | P | y | t | h | o | n |
   +---+---+---+---+---+---+
     0   1   2   3   4   5   
    -6  -5  -4  -3  -2  -1
  """
  # first item
  bikes[0]
  # last item
  bikes[-1]

  # looping through a list
  for bike in bikes:
      print(bike)

  # Adding items to a list
  bikes = []
  bikes.append('trek')
  bikes.append('redline')
  bikes.append('giant')

  # Making numerical Lists
  squares = []
  for x in range(1, 11):
      squares.append(x**2)

  # List Comprehensions
  squares = [x**2 for x in range(1,11)]

  # Slicing a list
  a = ['sam', 'bob', 'ada', 'bea']
  """
  a[start:end:step] # start through not past end, by step
  a[start:end]      # items start through end-1
  a[start:]         # items start through the rest of the array
  a[:end]           # items from the beginning through end-1
  a[:]              # copy of whole array
  """
  a[-1]    # last item in the array
  a[-2:]   # last two items in the array
  a[:-2]   # everything except the last two items

  a[::-1]    # all items in the array, reversed
  a[1::-1]   # the first two items, reversed
  a[:-3:-1]  # the last two items, reversed
  a[-3::-1]  # everything except the last two items, reversed
#+END_SRC

