*** Bound and Unbound Methods
*Bound* Function => A call to a member Function

#+BEGIN_SRC python
  class Test:
      def method_one(self):
	  pass
      def method_two():
	  pass

  a = Test()
  a.method_one() # Test.method_one(a)
  a.method_two() # TypeError. method_two takes no argument ( 1 given )
#+END_SRC

#+BEGIN_SRC python
# solution => convert method_two into staticmethod

class Test:
    def method_one(self):
        print('called method one')

    @staticmethod
    def method_two():
        print('called method two')
#+END_SRC

#+BEGIN_SRC shell
>>> a_test = Test()
>>> a_test.method_one()
Called method_one
>>> a_test.method_two()
Called method_two
>>> Test.method_two()
Called method_two
#+END_SRC

#+BEGIN_SRC shell
$ python3                                                                                                                                                      [12:20:54]
Python 3.6.5 (default, Apr  1 2018, 05:46:30) 
[GCC 7.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> class C:
...     def __init__(self, name):
...             self.name = name
... 
>>> class C:
...     def __init__(self, name):
...             self.name = name
...     def foo(self):
...             print(self.name)
... 
>>> C.foo
<function C.foo at 0x7f4cc2465bf8>
>>> C.foo.__get__(C('alamin'))
<bound method C.foo of <__main__.C object at 0x7f4cc2470160>>
>>> C.foo.__get__(C('alamin'))()
alamin
#+END_SRC
